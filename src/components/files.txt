To create a React app based on the provided Hangman game code, you'll need to break down the functionality into React components and manage state appropriately. Here's a basic structure of how you can do it:

1. **Component Structure:**
   - HangmanGame (Parent Component)
     - HangmanDisplay
     - WordContainer
     - Keyboard
     - RestartButton
     - HomeButton
     - PopupContainer
       - CongratulationsPopup
       - OopsPopup
       - HelpPopup

2. **Component Implementation:**
   - HangmanGame: This component will manage the game state, including the selected word, guessed letters, incorrect guesses count, and handling game logic.
   - HangmanDisplay: Display the hangman based on the incorrect guesses count.
   - WordContainer: Display the word with underscores and guessed letters.
   - Keyboard: Display the keyboard and handle letter clicks.
   - RestartButton: Button to restart the game.
   - HomeButton: Button to navigate to the home page.
   - PopupContainer: Container for displaying popups.
     - CongratulationsPopup: Popup displayed when the word is guessed correctly.
     - OopsPopup: Popup displayed when all guesses are used.
     - HelpPopup: Popup displaying game instructions.

3. **State Management:**
   - The `HangmanGame` component should manage the game state, including the selected word, guessed letters, incorrect guesses count, and whether popups are displayed.
   - Use React state hooks (`useState`) to manage state within functional components.

4. **Event Handling:**
   - Handle letter clicks, restart button clicks, home button clicks, and popup close button clicks using event handlers.

5. **Styling:**
   - Style the components using CSS classes or CSS-in-JS libraries like styled-components.

6. **Routing:**
   - If the game has multiple levels, use React Router to handle navigation between different levels.

7. **Component Interaction:**
   - Pass down necessary props and callbacks to child components for interaction.
   - Use callback functions to communicate between child and parent components when necessary.